@page "/"
@model AdminPanel.Pages.Admin.IndexModel
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery

@{
ViewData["Title"] = "Admin";
var tokens = Antiforgery.GetAndStoreTokens(HttpContext);
}

<div class="container-fluid px-2">

    <input type="hidden" id="__RequestVerificationToken" value="@tokens.RequestToken" />

    <div class="d-flex flex-row justify-content-between align-items-center my-2">
        <h1 class="h5 mb-0">Admin</h1>
        <div class="form-check form-switch m-0">
            <input class="form-check-input" type="checkbox" id="autoRefreshToggle">
            <label class="form-check-label small" for="autoRefreshToggle">Auto 15s</label>
        </div>
    </div>

    <div class="card shadow-sm mb-2">
        <div class="card-body py-2">
            <form method="post" asp-page-handler="SetPassword"
                  class="d-flex flex-row flex-wrap align-items-center gap-2 m-0">
                <div class="small text-muted">Current password</div>
                <code class="px-2 py-1 bg-light rounded">@Model.CurrentUnlockPassword</code>

                <div class="vr d-none d-sm-block" style="height:22px;"></div>

                <input type="password" name="newPassword"
                       class="form-control form-control-sm"
                       style="max-width:220px" placeholder="New password" />
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-sm btn-primary">Save</button>

                @if (TempData["Msg"] is string msg && !string.IsNullOrWhiteSpace(msg))
                {
                <span class="text-success small ms-1">@msg</span>
                }
            </form>
        </div>
    </div>

    @if (Model.Agents.Count == 0)
    {
    <div class="alert alert-secondary">No active agents.</div>
    }
    else
    {
    <div class="d-flex flex-column gap-2">
        @foreach (var kv in Model.Agents)
        {
        var machine = kv.Key;
        var rec = kv.Value;
        Model.Policies.TryGetValue(machine, out var pol);
        var allowedIso = pol?.AllowedUntil.ToString("O") ?? "";
        var volume = pol?.VolumePercent ?? 75;  // дефолт 75%
        bool online = rec.IsOnline;

        <div class="card admin-card @(online ? "" : "admin-card-offline")">
            <div class="card-body">

                <form method="post" class="m-0">
                    <input type="hidden" name="machine" value="@machine" />
                    @Html.AntiForgeryToken()

                    <!-- ROW A: Name | horizontal Volume | Status -->
                    <div class="pc-rowA">
                        <div class="pc-name ui-font" title="@rec.Status.OS">@rec.Status.Machine</div>

                        <div class="pc-vol-wrap">
                            <input type="range"
                                   class="form-range vol-h"
                                   min="0" max="100" step="1"
                                   name="volume"
                                   value="@volume"
                                   @(online ? null : "disabled")
                                   oninput="updateVolReadout(this)"
                                   onchange="if(isOnline('@online')) submitVolume('@machine', this.value)" />
                            <span class="vol-readout">
                                        <output class="vol-out">@volume</output><span class="vol-unit">%</span>
                                    </span>
                        </div>

                        @if (online)
                        {
                        <span class="badge badge-status bg-success ui-font">ONLINE</span>
                        }
                        else
                        {
                        <span class="badge badge-status bg-secondary ui-font">OFFLINE</span>
                        }
                    </div>

                    <!-- ROW B: Minutes | Add | Set -->
                    <div class="pc-rowB">
                        <div class="input-group tight-input minutes-group">
                            <span class="input-group-text ui-font">Minutes</span>
                            <input type="number"
                                   name="minutes"
                                   value="30"
                                   min="0"
                                   class="form-control ui-font minutes-input"
                                   placeholder="0"
                                   @(online ? null : "disabled") />
                        </div>

                        <button type="submit"
                                formaction="?handler=AddTime"
                                class="btn btn-gradient-blue btn-sm touch-36 w-100"
                                @(online ? null : "disabled")>Add</button>

                        <button type="submit"
                                formaction="?handler=SetTime"
                                class="btn btn-gradient-blue btn-sm touch-36 w-100"
                                @(online ? null : "disabled")>Set</button>
                    </div>

                    <!-- ROW C: Timer | Off -->
                    <div class="pc-rowC">
                                <span class="badge badge-remaining ui-font js-remaining-badge"
                                      data-allowed-until="@allowedIso">--</span>

                        <button type="submit"
                                formaction="?handler=Shutdown"
                                class="btn btn-dark btn-sm touch-36 btn-off"
                                @(online ? null : "disabled")>Off</button>
                    </div>
                </form>

            </div>
        </div>
        }
    </div>
    }
</div>

@section Scripts {
<script>
    function isOnline(flagStr){
        return flagStr === 'True';
    }

    function updateVolReadout(input){
        try{
            const wrap = input.parentElement.querySelector('.vol-out');
            if(wrap){ wrap.value = input.value; }
        }catch(e){ /* ignore */ }
    }

    async function submitVolume(machine, value){
        try{
            const token = document.getElementById('__RequestVerificationToken')?.value || '';
            const form = new FormData();
            form.append('machine', machine);
            form.append('volume', value);

            await fetch('?handler=SetVolume', {
                method:'POST',
                body: form,
                credentials:'same-origin',
                headers: { 'RequestVerificationToken': token }
            });
        }catch(e){ console.error(e); }
    }

    (function () {
        function pad(n) { return n < 10 ? '0' + n : '' + n; }
        function updateRemaining() {
            const nodes = document.querySelectorAll('.js-remaining-badge');
            const now = new Date();
            nodes.forEach(n => {
                const iso = n.getAttribute('data-allowed-until');
                n.classList.remove('bg-success', 'bg-warning', 'bg-danger', 'bg-secondary');
                if (!iso) { n.textContent = '-'; n.classList.add('bg-secondary'); return; }
                const until = new Date(iso);
                if (isNaN(until.getTime())) { n.textContent = '-'; n.classList.add('bg-secondary'); return; }
                let diff = Math.floor((until - now) / 1000);
                if (diff <= 0) { n.textContent = '0s'; n.classList.add('bg-danger'); return; }

                const h = Math.floor(diff / 3600); diff -= h * 3600;
                const m = Math.floor(diff / 60); const s = diff - m * 60;
                n.textContent = (h > 0 ? (h + 'h ') : '') + m + 'm ' + pad(s) + 's';

                const totalMin = (until - now) / 60000;
                if (totalMin > 15) n.classList.add('bg-success');
                else if (totalMin > 5) n.classList.add('bg-warning');
                else n.classList.add('bg-danger');
            });
        }

        updateRemaining();
        setInterval(updateRemaining, 1000);

        const KEY = 'autoRefresh15Enabled';
        const toggle = document.getElementById('autoRefreshToggle');
        let refreshTimer = null;
        function startAutoRefresh() { if (!refreshTimer) refreshTimer = setInterval(() => location.reload(), 15000); }
        function stopAutoRefresh() { if (refreshTimer) { clearInterval(refreshTimer); refreshTimer = null; } }
        const saved = localStorage.getItem(KEY);
        const enabled = (saved === null) ? true : saved === '1';
        toggle.checked = enabled;
        if (enabled) startAutoRefresh();
        toggle.addEventListener('change', function () {
            if (toggle.checked) { localStorage.setItem(KEY, '1'); startAutoRefresh(); }
            else { localStorage.setItem(KEY, '0'); stopAutoRefresh(); }
        });
    })();
</script>
}
